{
  "hash": "8d1967808e3736547deabf8c4010c400",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"EMA Study Shaps\"\nauthor: \"John Curtin\"\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n## Set up environment\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n# handle conflicts\noptions(conflicts.policy = \"depends.ok\")\n\nlibrary(tidyverse, quietly = TRUE)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\ntheme_set(theme_classic()) \n\n# Paths\ndevtools::source_url(\"https://github.com/jjcurtin/lab_support/blob/main/format_path.R?raw=true\",\n                     sha1 = \"a58e57da996d1b70bb9a5b58241325d6fd78890f\")\npath_models <- format_path(\"studydata/risk/models/ema\")\npath_data_shared <- format_path(\"studydata/risk/data_processed/shared\")\npath_data_ema <- format_path(\"studydata/risk/data_processed/ema\")\n```\n:::\n\n\n## Get Local and Global SHAPs\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n# shap_local_week <- read_rds(file.path(path_models, \"outer_shaps_1week_0_v5_nested_main.rds\")) \n# shap_local_day <- read_rds(file.path(path_models, \"outer_shaps_1day_0_v5_nested_main.rds\"))\n# shap_local_hour <- read_rds(file.path(path_models, \"outer_shaps_1hour_0_v5_nested_main.rds\")) \n  \nshap_local_week <- read_rds(file.path(path_models, \"outer_shapsgrp_1week_0_v5_nested_main.rds\")) \nshap_local_day <- read_rds(file.path(path_models, \"outer_shapsgrp_1day_0_v5_nested_main.rds\"))\nshap_local_hour <- read_rds(file.path(path_models, \"outer_shapsgrp_1hour_0_v5_nested_main.rds\")) \n\nshap_global_week <- shap_local_week |> \n  group_by(variable_grp) |> \n  summarize(mean_value = mean(abs(value)), .groups = \"drop\") |> \n  arrange(mean_value)\nshap_global_day <- shap_local_day |> \n  group_by(variable_grp) |> \n  summarize(mean_value = mean(abs(value)), .groups = \"drop\") |> \n  arrange(mean_value)\nshap_global_hour <- shap_local_hour |> \n  group_by(variable_grp) |> \n  summarize(mean_value = mean(abs(value)), .groups = \"drop\") |> \n  arrange(mean_value)\n\nshap_global_all <- shap_global_week |>\n  mutate(window = \"week\") |>\n  bind_rows(shap_global_day |>\n              mutate(window = \"day\")) |>\n  bind_rows(shap_global_hour |>\n              mutate(window = \"hour\")) |>\n  mutate(window = factor(window, levels = c(\"week\", \"day\", \"hour\")))\n```\n:::\n\n\n## Global SHAP Plot\n\n\n::: {#cell-fig-global .cell}\n\n```{.r .cell-code .hidden}\n#| label: fig-global\n#| fig-cap: Global SHAPs by Model\n\nshap_global_all |>\n  mutate(group = reorder(variable_grp, mean_value, sum)) |>\n  ggplot() +\n  geom_bar(aes(x = group, y = mean_value, fill = window), stat = \"identity\") +\n  ylab(\"Mean |SHAP| value (in Log-Odds)\") +\n  xlab(\"\") +\n  coord_flip() +\n  scale_fill_manual(values = c(\"orange\",\"green\",\"blue\"))\n```\n\n::: {.cell-output-display}\n![Global SHAPs by Model](ema_figs_shaps_files/figure-html/fig-global-1.png){#fig-global width=672}\n:::\n:::\n\n\n## Local  Plot Function\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nplot_local <- function(shaps, grp_levels, ids, model){\n  bar_color <- \n    case_when(\n      tolower(model) == \"week\" ~ \"orange\",\n      tolower(model) == \"day\" ~ \"green\",\n      tolower(model) == \"hour\" ~ \"blue\",\n    )\n  \n  shaps |> \n    filter(id_obs %in% ids) |>\n    mutate(group = factor(variable_grp, levels = grp_levels)) |>\n    ggplot(mapping = aes(x = group, y = value)) +\n    ggforce::geom_sina(method = \"counts\", maxwidth = 0.7, alpha = 0.4,\n                       color = bar_color) +\n    geom_hline(yintercept = 0) +\n    scale_y_continuous(limits = c(-2, 5), breaks = seq(-2, 5)) +\n    ylab(\"SHAP value (in Log-Odds)\") +\n    xlab(\"\") +\n    coord_flip() \n    # ggtitle(model)\n}\n```\n:::\n\n\n\n## Local SHAP Plots\n\nGet feature order and ids for downsample\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n# get order for items based on global sum importance\ngrp_levels <- shap_global_all |>\n  mutate(variable_grp = reorder(variable_grp, mean_value, sum)) |>\n  pull(variable_grp) |>\n  levels()\n\n# downsample to 2% of observations for each plot\nids_week <- shap_local_week |>\n  pull(id_obs) |>\n  unique()\nids_week <- ids_week |> sample(size = round(length(ids_week)/50))\n\nids_day <- shap_local_day |>\n  pull(id_obs) |>\n  unique()\nids_day <- ids_day |> sample(size = round(length(ids_day)/50))\n\nids_hour <- shap_local_hour |>\n  pull(id_obs) |>\n  unique()\nids_hour <- ids_hour |> sample(size = round(length(ids_hour)/50))\n```\n:::\n\n\nWeek Plot\n\n::: {#cell-fig-local_week .cell}\n\n```{.r .cell-code .hidden}\n#| label: fig-local_week\n#| fig-cap: Local SHAPS - Week\n\nshap_local_week |>\n  plot_local(grp_levels, ids_week, \"Week\")\n```\n\n::: {.cell-output-display}\n![Local SHAPS - Week](ema_figs_shaps_files/figure-html/fig-local_week-1.png){#fig-local_week width=672}\n:::\n:::\n\n\nDay plot\n\n::: {#cell-fig-local_day .cell}\n\n```{.r .cell-code .hidden}\n#| label: fig-local_day\n#| fig-cap: Local SHAPS - Day\n\nshap_local_day |>\n  plot_local(grp_levels, ids_day, \"Day\")\n```\n\n::: {.cell-output-display}\n![Local SHAPS - Day](ema_figs_shaps_files/figure-html/fig-local_day-1.png){#fig-local_day width=672}\n:::\n:::\n\n\nHour plot\n\n::: {#cell-fig-local_hour .cell}\n\n```{.r .cell-code .hidden}\n#| label: fig-local_hour\n#| fig-cap: Local SHAPS - Hour\n\nshap_local_hour |>\n  plot_local(grp_levels, ids_hour, \"Hour\")\n```\n\n::: {.cell-output-display}\n![Local SHAPS - Hour](ema_figs_shaps_files/figure-html/fig-local_hour-1.png){#fig-local_hour width=672}\n:::\n:::\n",
    "supporting": [
      "ema_figs_shaps_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}