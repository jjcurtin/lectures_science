---
title: "Risk1 probability plots"
author: "John Curtin"
editor_options: 
  chunk_output_type: console
---

## Overview

This script makes faceted histograms that display the probabilities of lapse separately for true lapse and no lapse observations.  

The data are from the EMA study based on RISK1 project

## Set up environment
```{r}
# handle conflicts
options(conflicts.policy = "depends.ok")

library(tidyverse)
theme_set(theme_classic()) 

# Paths
devtools::source_url("https://github.com/jjcurtin/lab_support/blob/main/format_path.R?raw=true",
                     sha1 = "a58e57da996d1b70bb9a5b58241325d6fd78890f")
# source("../../lab_support/format_path.R")
path_models <- format_path("studydata/risk/models/ema")
path_data_shared <- format_path("studydata/risk/data_processed/shared")
path_data_ema <- format_path("studydata/risk/data_processed/ema")
```

## Open preds dfs

```{r}
#| label: Load predictions files

preds_week <- read_rds(file.path(path_models, 
                               "outer_preds_1week_0_v5_nested_main.rds"))
preds_day <- read_rds(file.path(path_models, 
                              "outer_preds_1day_0_v5_nested_main.rds"))
preds_hour <- read_rds(file.path(path_models, 
                               "outer_preds_1hour_0_v5_nested_main.rds")) 
```


# Faceted Plots

Function for faceted probability plot

```{r}
plot_probs <- function(df_preds, model) {
  bar_color <- 
    case_when(
      tolower(model) == "week" ~ "orange",
      tolower(model) == "day" ~ "green",
      tolower(model) == "hour" ~ "blue",
    )
  df_preds |> 
    ggplot(data = _, aes(x = prob_beta)) + 
     geom_histogram(bins = 15, fill = bar_color, col = "black", alpha = .4) +
     facet_wrap(~label, nrow = 2, scales = "free_y") +
     xlab("P(Lapse | X)") +
    scale_y_continuous(labels = scales::comma)
}
``` 
  

One week window with no vertical line for decision threshold
```{r}
#| label: fig-week-no_dec_thres
#| fig-cap: P(Lapse | X) by Truth - Week
#| fig-height: 6
#| fig-width: 6

fig_week <- preds_week |> 
  plot_probs("week")

fig_week
```

One week window with vertical line for default decision threshold
```{r}
#| label: fig-week
#| fig-cap: P(Lapse | X) by Truth - Day 
#| fig-height: 6
#| fig-width: 6

fig_week +
  geom_vline(xintercept = .5, color = "red", size = 2)
```

One day window with vertical line for default decision threshold
```{r}
#| label: fig-day
#| fig-cap: P(Lapse | X) by Truth - Hour 
#| fig-height: 6
#| fig-width: 6

fig_day <- preds_day |> 
 plot_probs("day")
 
fig_day +
   geom_vline(xintercept = .5, color = "red", linewidth = 2)
```

One day window with vertical line for high (p = 0.9) decision threshold
```{r}
#| label: fig-day-high_dec_thres
#| fig-cap: Lapse Probability by Truth - Day
#| fig-height: 6
#| fig-width: 6

fig_day +
  geom_vline(xintercept = .9, color = "red", linewidth = 2)
```


# Calibration plots

```{r}
#| label: calibration_plot_hour 
#| out-height: 6in
#| out-width: 6in

preds_hour |> 
  mutate(bins = cut(prob_beta, breaks = seq(0, 1, .125)),
         lapse = if_else(label == "Lapse", 1, 0)) |> 
  group_by(bins)  |> 
  summarize(mean_lapse = mean(lapse),
            .groups = "drop") |>
  mutate(bins = as.numeric(bins),
         midpoints = .125/2 + .125 * (bins - 1))  |> 
  ggplot(data = _, aes(x = midpoints, y = mean_lapse)) +
    geom_abline(slope = 1, intercept = 0, linetype = "dotted") +
    geom_line() +
    geom_point() +
    xlab("Predicted Lapse Probability (bin mid-point)") +
    ylab("Observed Lapse Probability") +
    scale_x_continuous(breaks = seq(0, 1, .125),
                        limits = c(0,1)) +
    scale_y_continuous(breaks = seq(0, 1, .125),
                        limits = c(0,1))
```


# ROC plots

ROC Plot Function

```{r}
plot_roc <- function(df, line_colors){
  df |> 
  ggplot(aes(x = 1 - specificity, y = sensitivity, color = model)) +
    geom_path(linewidth = 1.25) +
    geom_abline(lty = 3) +
    coord_fixed(xlim = c(0, 1), ylim = c(0, 1)) +
    labs(x = "False Positive Rate",
        y = "True Positive Rate") +
  scale_color_manual(values = line_colors)
}
```


Generate ROC Curves
```{r}
roc_week <- preds_week |> 
  yardstick::roc_curve(prob_beta, truth = label) |> 
  mutate(model = "1week")
  
roc_day <- preds_day |> 
  yardstick::roc_curve(prob_beta, truth = label) |> 
  mutate(model = "1day")

roc_hour <- preds_hour|> 
  yardstick::roc_curve(prob_beta, truth = label) |> 
  mutate(model = "1hour")

roc_all <- roc_week |> 
  bind_rows(roc_day) |> 
  bind_rows(roc_hour) |> 
  mutate(thres_avg = round(.threshold, 3)) |> 
  group_by(model, thres_avg) |> 
  reframe(sensitivity = mean(sensitivity), specificity =  mean(specificity)) |> 
  mutate(model = factor(model, levels = c("1week", "1day", "1hour"),
                        labels = c("week", "day", "hour")))
```


Plot Week only
```{r}
#| label: roc-week
#| out-height: 6in
#| out-width: 6in

# fig-cap: ROC Curves by Model

line_colors  <- c("orange", "green", "blue")

roc_all |>
  filter(model == "week") |>
  plot_roc(line_colors) # +
#   geom_text(x = .80, y = .20,
#            label = str_c("AUC = ", auROC_week),
#            show.legend = FALSE, color = "orange")
```

Plot Week & Day
```{r}
#| label: roc-week_day
#| out-height: 6in
#| out-width: 6in

# fig-cap: ROC Curves by Model
roc_all |>
  filter(model == "week" | model == "day") |>
  plot_roc(line_colors) # +
#   geom_text(x = .80, y = .20,
#            label = str_c("AUC = ", auROC_week),
#            show.legend = FALSE, color = "orange") +
#   geom_text(x = .80, y = .15,
#             label = str_c("AUC = ", auROC_day),
#            show.legend = FALSE, color = "green")
```

Plot all three windows
```{r}
#| label: roc-all
#| out-height: 6in
#| out-width: 6in

# fig-cap: ROC Curves by Model
roc_all |>
  plot_roc(line_colors) #  +
#   geom_text(x = .80, y = .20,
#            label = str_c("auROC = ", auROC_week),
#            show.legend = FALSE, color = "orange") +
#  geom_text(x = .80, y = .15,
#            label = str_c("auROC = ", auROC_day),
#            show.legend = FALSE, color = "green") +
#  geom_text(x = .80, y = .10,
#            label = str_c("auROC = ", auROC_hour),
#            show.legend = FALSE, color = "blue")
```

Save image to server
```{r}
# updated auROC to use value from posterier distribution
# label = str_c("auROC = ", auROC_day),

# jpeg(filename = here::here(path_images, "roc_all.jpg")) 

# roc_all |>
#  plot_roc(line_colors) +
#  geom_text(x = .80, y = .20,
#            label = "auROC = 0.90",
#            show.legend = FALSE, color = "orange") +
#  geom_text(x = .80, y = .15,
#            label = "auROC = 0.91",
#            show.legend = FALSE, color = "green") +
#  geom_text(x = .80, y = .10,
#            label = "auROC = 0.93",
#            show.legend = FALSE, color = "blue")

# dev.off()
```



Plot demo of random classifier

```{r}
#| label: roc-random
#| out-height: 6in
#| out-width: 6in

# fig-cap: ROC Curves
tibble(model = c("random", "random"),
       specificity = c(1, 1),
       sensitivity = c(0, 0)) |> 
   mutate(model = factor(model, levels = c("random", "perfect"))) |> 
   plot_roc(line_colors = c("gray", "red"))
   
```

Plot demo of random and perfect classifer

```{r}
#| label: roc-perfect
#| out-height: 6in
#| out-width: 6in

# fig-cap: ROC Curves
tibble(model = c("random", "random", "perfect", "perfect", "perfect"),
       specificity = c(1, 1, 1, 1, 0),
       sensitivity = c(0, 0, 0, 1, 1)) |> 
   mutate(model = factor(model, levels = c("random", "perfect"))) |> 
   plot_roc(line_colors = c("gray", "red"))
```


# PR curves

Generate PR curves
```{r}
pr_week <- preds_week |> 
  yardstick::pr_curve(prob_beta, truth = label) |> 
  mutate(model = "1week")

pr_day <- preds_day |> 
  yardstick::pr_curve(prob_beta, truth = label) |> 
  mutate(model = "1day")

pr_hour <- preds_hour|> 
  yardstick::pr_curve(prob_beta, truth = label) |> 
  mutate(model = "1hour")

pr_all <- pr_week |> 
  bind_rows(pr_day) |> 
  bind_rows(pr_hour) |> 
  mutate(thres_avg = round(.threshold, 3)) |> 
  group_by(model, thres_avg) |> 
  reframe(recall = mean(recall), precision =  mean(precision)) |> 
  mutate(model = factor(model, levels = c("1week", "1day", "1hour"),
                        labels = c("week", "day", "hour")))
```

Plot PR Curves by Model

```{r}
#| label: fig-prcurve
#| fig-cap: PR Curves by Model
#| fig-height: 6
#| fig-width: 6

pr_all |>
  ggplot(aes(x = recall, y = precision, color = model)) +
  geom_path(size = 1.25) +
  coord_fixed(xlim = c(0, 1), ylim = c(0, 1)) +
  labs(x = "Sensitivity (Recall)",
       y = "Positive Predictive Value (Precision)") +
  scale_color_manual(values = c("orange","green","blue")) +
  geom_hline(yintercept = .70, color = "black", size = 1, linetype = "dotted") +
  geom_segment(x = .72, y = -.05 , xend = .72, yend = .70,
               color = "orange", size = 1, linetype = "dotted") +
  geom_segment(x = .47, y = -.05 , xend = .47, yend = .70,
               color = "green", size = 1, linetype = "dotted") +
  geom_segment(x = .33, y = -.05 , xend = .33, yend = .70,
               color = "blue", size = 1, linetype = "dotted")
```


# Confusion matrix

predict class
```{r}
cm <- preds_day |> 
  mutate(.pred_label = if_else(prob_beta > .5, "Lapse", "No lapse"))
```


```{r}
confusion_matrix <- table(cm$label, cm$.pred_label)
confusion_matrix <- prop.table(confusion_matrix, margin = 1)

# Calculate column widths based on frequencies
column_widths <- prop.table(table(cm$label))

# Plot confusion matrix
heatmap(confusion_matrix, 
  col = colorRampPalette(c("white", "blue"))(100),
  main = "Confusion Matrix",
  xlab = "Predicted Label",
  ylab = "True Label",
  cex.col = column_widths,
  cex.row = 1,
  cex.main = 1.5,
  cex.lab = 1.2)
```