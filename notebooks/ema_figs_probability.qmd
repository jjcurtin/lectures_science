---
title: "Risk1 probability plots"
author: "John Curtin"
editor_options: 
  chunk_output_type: console
---

## Overview and Setup

This script makes faceted histograms that display the probabilities of lapse separately for true lapse and no lapse observations.  

The data are from the EMA study based on RISK1 project

### Set up environment
```{r}
# handle conflicts
options(conflicts.policy = "depends.ok")

library(tidyverse)
theme_set(theme_classic()) 

# Paths
devtools::source_url("https://github.com/jjcurtin/lab_support/blob/main/format_path.R?raw=true",
                     sha1 = "a58e57da996d1b70bb9a5b58241325d6fd78890f")
# source("../../lab_support/format_path.R")
path_models <- format_path("studydata/risk/models/ema")
path_data_shared <- format_path("studydata/risk/data_processed/shared")
path_data_ema <- format_path("studydata/risk/data_processed/ema")
```

### Open preds dfs

```{r}
#| label: Load predictions files

preds_week <- read_rds(file.path(path_models, 
                               "outer_preds_1week_0_v5_nested_main.rds"))
preds_day <- read_rds(file.path(path_models, 
                              "outer_preds_1day_0_v5_nested_main.rds"))
preds_hour <- read_rds(file.path(path_models, 
                               "outer_preds_1hour_0_v5_nested_main.rds")) 
```


## Faceted Plots

### Faceted plof function

```{r}
plot_probs <- function(df_preds, model) {
  bar_color <- 
    case_when(
      tolower(model) == "week" ~ "orange",
      tolower(model) == "day" ~ "green",
      tolower(model) == "hour" ~ "blue",
    )
  df_preds |> 
    ggplot(data = _, aes(x = prob_beta)) + 
     geom_histogram(bins = 15, fill = bar_color, col = "black", alpha = .4) +
     facet_wrap(~label, nrow = 2, scales = "free_y") +
     xlab("P(Lapse | X)") +
    scale_y_continuous(labels = scales::comma)
}
``` 
  

### Plots

One week window with no vertical line for decision threshold
```{r}
#| label: fig-week-no_dec_thres
#| fig-cap: P(Lapse | X) by Truth - Week
#| fig-height: 6
#| fig-width: 6

fig_week <- preds_week |> 
  plot_probs("week")

fig_week
```

One week window with vertical line for default decision threshold
```{r}
#| label: fig-week
#| fig-cap: P(Lapse | X) by Truth - Day 
#| fig-height: 6
#| fig-width: 6

fig_week +
  geom_vline(xintercept = .5, color = "red", size = 2)
```

One day window with vertical line for default decision threshold
```{r}
#| label: fig-day
#| fig-cap: P(Lapse | X) by Truth - Hour 
#| fig-height: 6
#| fig-width: 6

fig_day <- preds_day |> 
 plot_probs("day")
 
fig_day +
   geom_vline(xintercept = .5, color = "red", linewidth = 2)
```

One day window with vertical line for high (p = 0.9) decision threshold
```{r}
#| label: fig-day-high_dec_thres
#| fig-cap: Lapse Probability by Truth - Day
#| fig-height: 6
#| fig-width: 6

fig_day +
  geom_vline(xintercept = .9, color = "red", linewidth = 2)
```


## Calibration plots

```{r}
#| label: fig-calibration_plot_day 
#| fig-cap: Observed vs. Predicted Lapse Probability 
#| fig-height: 6
#| fig-width: 6

bin_width = 0.10
preds_day |> 
  mutate(bins = cut(prob_beta, breaks = seq(0, 1, bin_width)),
         lapse = if_else(label == "Lapse", 1, 0)) |> 
  group_by(bins)  |> 
  summarize(mean_lapse = mean(lapse),
            .groups = "drop") |>
  mutate(bins = as.numeric(bins),
         midpoints = bin_width/2 + bin_width * (bins - 1))  |> 
  ggplot(data = _, aes(x = midpoints, y = mean_lapse)) +
    geom_abline(slope = 1, intercept = 0, linetype = "dotted") +
    geom_line() +
    geom_point() +
    xlab("Predicted Lapse Probability (bin mid-point)") +
    ylab("Observed Lapse Probability") +
    scale_x_continuous(breaks = seq(0, 1, bin_width),
                       limits = c(0, 1)) +
    scale_y_continuous(breaks = seq(0, 1, bin_width),
                       limits = c(0, 1)) +
    theme(axis.text.x = element_text(size = 12),
          axis.text.y = element_text(size = 12),
          axis.title.x = element_text(size = 16),
          axis.title.y = element_text(size = 16))
```


## ROC plots

### ROC Plot Function

```{r}
plot_roc <- function(df, line_colors){
  df |> 
  ggplot(aes(x = 1 - specificity, y = sensitivity, color = model)) +
    geom_path(linewidth = 1.25) +
    geom_abline(lty = 3) +
    coord_fixed(xlim = c(0, 1), ylim = c(0, 1)) +
    labs(x = "False Positive Rate",
        y = "True Positive Rate") +
  scale_color_manual(values = line_colors)
}
```


### Generate ROC Curves
```{r}
roc_week <- preds_week |> 
  yardstick::roc_curve(prob_beta, truth = label) |> 
  mutate(model = "1week")
  
roc_day <- preds_day |> 
  yardstick::roc_curve(prob_beta, truth = label) |> 
  mutate(model = "1day")

roc_hour <- preds_hour|> 
  yardstick::roc_curve(prob_beta, truth = label) |> 
  mutate(model = "1hour")

roc_all <- roc_week |> 
  bind_rows(roc_day) |> 
  bind_rows(roc_hour) |> 
  mutate(thres_avg = round(.threshold, 3)) |> 
  group_by(model, thres_avg) |> 
  reframe(sensitivity = mean(sensitivity), specificity =  mean(specificity)) |> 
  mutate(model = factor(model, levels = c("1week", "1day", "1hour"),
                        labels = c("week", "day", "hour")))
```

### Plots

Plot Week only
```{r}
#| label: fig-roc_week
#| fig-cap: ROC Curves by Model
#| fig-height: 6
#| fig-width: 6

line_colors  <- c("orange", "green", "blue")

roc_all |>
  filter(model == "week") |>
  plot_roc(line_colors) # +
#   geom_text(x = .80, y = .20,
#            label = str_c("AUC = ", auROC_week),
#            show.legend = FALSE, color = "orange")
```

Plot Week & Day
```{r}
#| label: fig-roc_week_day
#| fig-cap: ROC Curves by Model
#| fig-height: 6
#| fig-width: 6

roc_all |>
  filter(model == "week" | model == "day") |>
  plot_roc(line_colors) # +
#   geom_text(x = .80, y = .20,
#            label = str_c("AUC = ", auROC_week),
#            show.legend = FALSE, color = "orange") +
#   geom_text(x = .80, y = .15,
#             label = str_c("AUC = ", auROC_day),
#            show.legend = FALSE, color = "green")
```

Plot all three windows
```{r}
#| label: fig-roc_all
#| fig-cap: ROC Curves by Model
#| fig-height: 6
#| fig-width: 6

roc_all |>
  plot_roc(line_colors) #  +
#   geom_text(x = .80, y = .20,
#            label = str_c("auROC = ", auROC_week),
#            show.legend = FALSE, color = "orange") +
#  geom_text(x = .80, y = .15,
#            label = str_c("auROC = ", auROC_day),
#            show.legend = FALSE, color = "green") +
#  geom_text(x = .80, y = .10,
#            label = str_c("auROC = ", auROC_hour),
#            show.legend = FALSE, color = "blue")
```

Save image to server
```{r}
# updated auROC to use value from posterier distribution
# label = str_c("auROC = ", auROC_day),

# jpeg(filename = here::here(path_images, "roc_all.jpg")) 

# roc_all |>
#  plot_roc(line_colors) +
#  geom_text(x = .80, y = .20,
#            label = "auROC = 0.90",
#            show.legend = FALSE, color = "orange") +
#  geom_text(x = .80, y = .15,
#            label = "auROC = 0.91",
#            show.legend = FALSE, color = "green") +
#  geom_text(x = .80, y = .10,
#            label = "auROC = 0.93",
#            show.legend = FALSE, color = "blue")

# dev.off()
```


Plot demo of random classifier

```{r}
#| label: fig-roc_random
#| fig-cap: ROC Curves
#| fig-height: 6
#| fig-width: 6

tibble(model = c("random", "random"),
       specificity = c(1, 1),
       sensitivity = c(0, 0)) |> 
   mutate(model = factor(model, levels = c("random", "perfect"))) |> 
   plot_roc(line_colors = c("gray", "red"))
   
```

Plot demo of random and perfect classifer

```{r}
#| label: fig-roc_perfect
#| fig-cap: ROC Curves
#| fig-height: 6
#| fig-width: 6

tibble(model = c("random", "random", "perfect", "perfect", "perfect"),
       specificity = c(1, 1, 1, 1, 0),
       sensitivity = c(0, 0, 0, 1, 1)) |> 
   mutate(model = factor(model, levels = c("random", "perfect"))) |> 
   plot_roc(line_colors = c("gray", "red"))
```


## Confusion matrix

### CM Plot functions

```{r}
space_fun <- function(x, adjustment, rescale = FALSE) {
  if (rescale) {
    x <- x / sum(x)
  }

  adjustment <- sum(x) / adjustment

  xmax <- cumsum(x) + seq(0, length(x) - 1) * adjustment
  xmin <- cumsum(x) - x + seq(0, length(x) - 1) * adjustment

  dplyr::tibble(xmin = xmin, xmax = xmax)
}

space_y_fun <- function(data, id, x_data) {
  out <- space_fun(data[, id], 100, rescale = TRUE) * -1

  names(out) <- c("ymin", "ymax")

  out$xmin <- x_data[[id, 1]]
  out$xmax <- x_data[[id, 2]]

  out
}

cm_mosaic <- function(x) {
  `%+%` <- ggplot2::`%+%`

  cm_zero <- (as.numeric(x$table == 0) / 2) + x$table

  x_data <- space_fun(colSums(cm_zero), 200)

  full_data_list <- lapply(
    seq_len(ncol(cm_zero)),
    FUN = function(.x) space_y_fun(cm_zero, .x, x_data))

  full_data <- dplyr::bind_rows(full_data_list)

  y1_data <- full_data_list[[1]]

  tick_labels <- colnames(cm_zero)
  axis_labels <- get_axis_labels(x)

  ggplot2::ggplot(full_data) %+%
    ggplot2::geom_rect(
      ggplot2::aes(
        xmin = xmin,
        xmax = xmax,
        ymin = ymin,
        ymax = ymax
      ), 
      fill = c("green", "red", "red", "green")
    ) %+%
    ggplot2::scale_x_continuous(
      breaks = (x_data$xmin + x_data$xmax) / 2,
      labels = tick_labels
    ) %+%
    ggplot2::scale_y_continuous(
      breaks = (y1_data$ymin + y1_data$ymax) / 2,
      labels = tick_labels
    ) %+%
    ggplot2::labs(
      y = axis_labels$y,
      x = axis_labels$x
    ) %+%
    ggplot2::theme(panel.background = ggplot2::element_blank())
}

# Note: Always assumes predictions are on the LHS of the table
get_axis_labels <- function(x) {
  table <- x$table

  labels <- names(dimnames(table))

  if (is.null(labels)) {
    labels <- c("Prediction", "Truth")
  }

  list(
    y = labels[[1]],
    x = labels[[2]]
  )
}
```


### predict class for day model

```{r}
j_thres_roc <- roc_day |> 
  mutate(j = sensitivity + specificity - 1) |> 
  slice_max(j) |> 
  print() |> 
  pull(.threshold)

(cm <- preds_day |> 
   mutate(estimate = if_else(prob_beta > j_thres_roc, "Lapse", "No lapse"),
          estimate = fct(estimate, levels = c("No lapse", "Lapse")),
          label = fct_relevel(label, "No lapse")) |> 
   yardstick::conf_mat(truth = label, estimate = estimate))
```


```{r}
#| label: fig-cm_day
#| fig-cap: Confusion Matrix Day Model
#| fig-height: 6
#| fig-width: 6

cm_mosaic(cm) +
  theme(
    axis.text.x = element_text(size = 16),
    axis.text.y = element_text(size = 16),
    axis.title.x = element_text(size = 24),
    axis.title.y = element_text(size = 24)) +
  geom_text(x = 350000, y = -.4, label = "612,086", color = "black", size = 6) +
  geom_text(x = 350000, y = -.9, label = "147,130", color = "black", size = 6) +
  geom_text(x = 800000, y = -.07, label = "9,244", color = "black", size = 6) +
  geom_text(x = 800000, y = -.55, label = "54,077", color = "black", size = 6)
```


## PR curves

### Generate PR curves
```{r}
pr_week <- preds_week |> 
  yardstick::pr_curve(prob_beta, truth = label) |> 
  mutate(model = "1week")

pr_day <- preds_day |> 
  yardstick::pr_curve(prob_beta, truth = label) |> 
  mutate(model = "1day")

pr_hour <- preds_hour|> 
  yardstick::pr_curve(prob_beta, truth = label) |> 
  mutate(model = "1hour")

pr_all <- pr_week |> 
  bind_rows(pr_day) |> 
  bind_rows(pr_hour) |> 
  mutate(thres_avg = round(.threshold, 3)) |> 
  group_by(model, thres_avg) |> 
  reframe(recall = mean(recall), precision =  mean(precision)) |> 
  mutate(model = factor(model, levels = c("1week", "1day", "1hour"),
                        labels = c("week", "day", "hour")))
```

### Plot PR Curves by Model

```{r}
#| label: fig-prcurve
#| fig-cap: PR Curves by Model
#| fig-height: 6
#| fig-width: 6

pr_all |>
  ggplot(aes(x = recall, y = precision, color = model)) +
  geom_path(size = 1.25) +
  coord_fixed(xlim = c(0, 1), ylim = c(0, 1)) +
  labs(x = "Sensitivity (Recall)",
       y = "Positive Predictive Value (Precision)") +
  scale_color_manual(values = c("orange","green","blue")) +
  geom_hline(yintercept = .70, color = "black", size = 1, linetype = "dotted") +
  geom_segment(x = .72, y = -.05 , xend = .72, yend = .70,
               color = "orange", size = 1, linetype = "dotted") +
  geom_segment(x = .47, y = -.05 , xend = .47, yend = .70,
               color = "green", size = 1, linetype = "dotted") +
  geom_segment(x = .33, y = -.05 , xend = .33, yend = .70,
               color = "blue", size = 1, linetype = "dotted")
```